var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/coverage.html",[0,1.5]],["body/coverage.html",[0,1.086,1,1.626,2,1.626,3,1.626,4,1.626,5,1.626,6,1.2,7,1.626,8,1.086,9,2.043,10,0.15,11,3.057,12,3.024,13,1.086,14,1.086,15,1.086,16,1.918,17,1.086,18,0.731,19,1.086,20,1.086,21,1.086,22,1.086,23,1.086,24,1.626,25,1.626,26,0.106,27,0.106]],["title/miscellaneous/functions.html",[28,0.408,29,1.34]],["body/miscellaneous/functions.html",[6,1.003,8,1.798,10,0.139,18,1.003,26,0.129,27,0.129,28,0.64,29,1.49,30,1.003,31,1.49,32,1.49,33,2.69,34,2.23,35,2.23,36,2.23]],["title/index.html",[30,0.755,37,1.121]],["body/index.html",[10,0.137,26,0.137,27,0.137,37,1.649]],["title/modules.html",[38,1.5]],["body/modules.html",[10,0.137,26,0.137,27,0.137,38,1.649]],["title/properties.html",[39,1.424,40,1.34]],["body/properties.html",[10,0.152,26,0.119,27,0.119,40,1.302,41,1.948,42,1.948,43,1.948,44,1.948,45,1.948,46,1.948,47,2.474,48,2.719,49,1.948,50,1.948,51,2.474,52,1.948,53,1.948,54,1.948,55,1.948,56,1.948,57,1.948,58,1.948,59,1.948,60,1.948,61,1.948,62,1.948,63,1.948]],["title/miscellaneous/variables.html",[28,0.408,64,1.34]],["body/miscellaneous/variables.html",[6,0.298,9,0.956,10,0.157,13,0.742,14,0.742,15,0.742,16,0.443,17,0.742,18,0.837,19,0.742,20,0.742,21,1.496,22,0.742,23,0.742,26,0.053,27,0.053,28,0.19,30,0.298,31,0.956,32,0.443,64,0.443,65,2.011,66,2.327,67,2.327,68,1.86,69,2.327,70,2.786,71,1.672,72,2.467,73,0.663,74,0.663,75,1.672,76,0.663,77,1.86,78,0.663,79,0.663,80,0.663,81,0.663,82,1.109,83,0.663,84,0.663,85,1.109,86,0.663,87,0.663,88,0.663,89,0.663,90,1.109,91,0.663,92,0.663,93,0.663,94,0.663,95,0.663,96,1.43,97,0.663,98,0.663,99,1.109,100,0.663,101,0.663,102,0.663,103,0.663,104,1.109,105,0.663,106,1.109,107,1.109,108,0.663,109,1.109,110,0.663,111,0.663,112,0.663,113,0.663,114,0.663,115,1.109,116,1.672,117,1.109,118,0.663,119,0.663,120,0.663,121,0.663,122,0.663,123,0.663,124,0.663,125,0.663,126,1.109,127,0.663,128,1.43,129,0.663,130,0.663,131,0.663,132,0.663,133,1.109,134,0.663,135,1.109,136,1.43,137,1.43,138,1.43,139,1.109,140,0.663,141,0.663,142,0.663,143,0.663,144,0.663,145,0.663,146,0.663,147,0.663,148,0.663,149,1.109,150,0.663,151,1.109,152,0.663,153,0.663,154,1.109,155,0.663,156,0.663,157,0.663,158,0.663,159,1.109,160,1.109,161,0.663,162,1.109,163,0.663,164,0.663,165,0.663,166,1.109,167,1.109,168,0.663]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":9,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.0",{"_index":42,"title":{},"body":{"properties.html":{}}}],["0/1",{"_index":11,"title":{},"body":{"coverage.html":{}}}],["3.0",{"_index":57,"title":{},"body":{"properties.html":{}}}],["9+&@#\\/%=~_|])/ig",{"_index":92,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9+&@#\\/%?=~_",{"_index":91,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_.find(repos",{"_index":136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["__point",{"_index":79,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent",{"_index":124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alexander",{"_index":62,"title":{},"body":{"properties.html":{}}}],["artsy",{"_index":141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artsyd",{"_index":140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":68,"title":{},"body":{"miscellaneous/variables.html":{}}}],["author",{"_index":61,"title":{},"body":{"properties.html":{}}}],["await",{"_index":72,"title":{},"body":{"miscellaneous/variables.html":{}}}],["b(https?|ftp|file",{"_index":89,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base64",{"_index":157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer",{"_index":155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer(content.data.content",{"_index":156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.tostring",{"_index":158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bugs",{"_index":53,"title":{},"body":{"properties.html":{}}}],["catch",{"_index":159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checker",{"_index":125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client",{"_index":48,"title":{},"body":{"properties.html":{}}}],["console.log(`[${repo",{"_index":127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":70,"title":{},"body":{"miscellaneous/variables.html":{}}}],["content",{"_index":152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contributors",{"_index":94,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contributors.data[0].login",{"_index":101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["coverage",{"_index":0,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["danger",{"_index":142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default",{"_index":66,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description",{"_index":43,"title":{},"body":{"properties.html":{}}}],["design",{"_index":45,"title":{},"body":{"properties.html":{}}}],["documentation",{"_index":1,"title":{},"body":{"coverage.html":{}}}],["dowork",{"_index":17,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dowork(artsyd",{"_index":145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dowork(eigen",{"_index":143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dowork(gravity",{"_index":144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dowork(repo",{"_index":146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eigen",{"_index":135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["f.split(\"/\").pop",{"_index":109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":2,"title":{},"body":{"coverage.html":{}}}],["find",{"_index":76,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":99,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fs.existssync(repocache",{"_index":129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fs.writefilesync(repocache",{"_index":131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":7,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":29,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":81,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getallorgrepos",{"_index":8,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getallorgrepos(gh",{"_index":32,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["getfile",{"_index":13,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getfile(gh",{"_index":73,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gh",{"_index":18,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["gh.issues.create",{"_index":168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gh.orgs.checkmembership({org",{"_index":163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gh.repos.getcontent",{"_index":153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gh.rest.repos.getcontributorsstats({owner",{"_index":95,"title":{},"body":{"miscellaneous/variables.html":{}}}],["git+https://github.com/alexrogalskiy/java",{"_index":59,"title":{},"body":{"properties.html":{}}}],["github",{"_index":47,"title":{},"body":{"properties.html":{}}}],["github.octokit({headers",{"_index":122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["githubowners",{"_index":106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["githubowners.length",{"_index":112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gpl",{"_index":56,"title":{},"body":{"properties.html":{}}}],["gravity",{"_index":139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["homepage",{"_index":50,"title":{},"body":{"properties.html":{}}}],["http://stackoverflow.com/questions/1500260/detect",{"_index":84,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://github.com/alexrogalskiy/java",{"_index":51,"title":{},"body":{"properties.html":{}}}],["identifier",{"_index":4,"title":{},"body":{"coverage.html":{}}}],["index",{"_index":30,"title":{"index.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inorg",{"_index":117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isuserinorg",{"_index":14,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isuserinorg(gh",{"_index":118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["java",{"_index":44,"title":{},"body":{"properties.html":{}}}],["javascript",{"_index":87,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.parse(fs.readfilesync(repocache).tostring",{"_index":130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.stringify(reposets",{"_index":132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keywords",{"_index":49,"title":{},"body":{"properties.html":{}}}],["leaveissue",{"_index":15,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["license",{"_index":55,"title":{},"body":{"properties.html":{}}}],["log",{"_index":19,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["log(repo",{"_index":75,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main",{"_index":20,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":27,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":28,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":38,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":35,"title":{},"body":{"miscellaneous/functions.html":{}}}],["new",{"_index":23,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["null",{"_index":161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":36,"title":{},"body":{"miscellaneous/functions.html":{}}}],["org",{"_index":21,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["orgname",{"_index":33,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":37,"title":{"index.html":{}},"body":{"index.html":{}}}],["owner",{"_index":116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["owners",{"_index":114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ownerstring",{"_index":102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ownerstring.match(urlregex",{"_index":105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["package",{"_index":39,"title":{"properties.html":{}},"body":{}}],["parameters",{"_index":34,"title":{},"body":{"miscellaneous/functions.html":{}}}],["path",{"_index":149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patterns",{"_index":46,"title":{},"body":{"properties.html":{}}}],["patterns.git",{"_index":60,"title":{},"body":{"properties.html":{}}}],["patterns/issues",{"_index":54,"title":{},"body":{"properties.html":{}}}],["patterns/tree/master/packages/github",{"_index":52,"title":{},"body":{"properties.html":{}}}],["people:__",{"_index":80,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perhaps",{"_index":100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["person",{"_index":98,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":97,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pointmatches",{"_index":82,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pointmatches.length",{"_index":93,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pointmatches[0",{"_index":103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pp",{"_index":78,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.cache_dir}/repos.json",{"_index":148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.github_org",{"_index":147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":40,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["r",{"_index":137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["r.name",{"_index":138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readme",{"_index":71,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readme.match(pp",{"_index":83,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readme.md",{"_index":74,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repo",{"_index":69,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repo.name",{"_index":96,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repo.owner.login",{"_index":154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repocache",{"_index":22,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["repos",{"_index":133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reposets",{"_index":128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reposets[\"data",{"_index":134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":58,"title":{},"body":{"properties.html":{}}}],["results",{"_index":26,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":77,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rogalskiy",{"_index":63,"title":{},"body":{"properties.html":{}}}],["slackurls",{"_index":110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["slackurls.length",{"_index":113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["someone",{"_index":121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":65,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":31,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/helpers/utils.ts",{"_index":6,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/index.ts",{"_index":16,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":5,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":25,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":24,"title":{},"body":{"coverage.html":{}}}],["text",{"_index":86,"title":{},"body":{"miscellaneous/variables.html":{}}}],["title",{"_index":166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["try",{"_index":151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type",{"_index":3,"title":{},"body":{"coverage.html":{}}}],["u.includes(\"github\")).map(f",{"_index":108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u.includes(\"slack\")).map(f",{"_index":111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urlregex",{"_index":88,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urls",{"_index":85,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urls.filter(u",{"_index":107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["username",{"_index":162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usersnotinorg",{"_index":115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usersnotinorg.length",{"_index":120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usersnotinorg.push(owner",{"_index":119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":67,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":12,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":64,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":41,"title":{},"body":{"properties.html":{}}}],["z0",{"_index":90,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/helpers/utils.ts\n            \n            function\n            getAllOrgRepos\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/helpers/utils.ts\n            \n            variable\n            getFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/helpers/utils.ts\n            \n            variable\n            isUserInOrg\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/helpers/utils.ts\n            \n            variable\n            leaveIssue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            doWork\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            gh\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            log\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            org\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/index.ts\n            \n            variable\n            repoCache\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            getAllOrgRepos   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helpers/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getAllOrgRepos\n                        \n                    \n                \n            \n            \n                \ngetAllOrgRepos(gh, orgName)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    gh\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    orgName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            Description : Java Design Patterns GitHub client\n        \n            Keywords : github-client\n        \n            Homepage : https://github.com/AlexRogalskiy/java-patterns/tree/master/packages/github-client\n        \n            Bugs : https://github.com/AlexRogalskiy/java-patterns/issues\n        \n            License : GPL-3.0\n        \n            Repository : git+https://github.com/AlexRogalskiy/java-patterns.git\n        \n            Author : Alexander Rogalskiy\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            doWork   (src/.../index.ts)\n                        \n                        \n                            getFile   (src/.../utils.ts)\n                        \n                        \n                            gh   (src/.../index.ts)\n                        \n                        \n                            isUserInOrg   (src/.../utils.ts)\n                        \n                        \n                            leaveIssue   (src/.../utils.ts)\n                        \n                        \n                            log   (src/.../index.ts)\n                        \n                        \n                            main   (src/.../index.ts)\n                        \n                        \n                            org   (src/.../index.ts)\n                        \n                        \n                            repoCache   (src/.../index.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        doWork\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (repo) => {\n  const readme = await getFile(gh, repo, \"README.md\")\n  if (!readme) {\n    log(repo, \"Could not find a README\")\n    return\n  }\n\n  const pp = /__Point People:__ (.*)/g\n  const pointMatches = readme.match(pp)\n\n  // http://stackoverflow.com/questions/1500260/detect-urls-in-text-with-javascript\n  const urlRegex = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/ig;\n\n  if (!pointMatches || pointMatches.length === 0) {\n    const contributors = await gh.rest.repos.getContributorsStats({owner: org, repo: repo.name})\n    log(repo, `No point person found, perhaps @${contributors.data[0].login}.`)\n  } else {\n    const ownerString = pointMatches[0] as string\n    const urls = ownerString.match(urlRegex) || []\n    const githubOwners = urls.filter(u => u.includes(\"github\")).map(f => f.split(\"/\").pop())\n    const slackUrls = urls.filter(u => u.includes(\"slack\")).map(f => f.split(\"/\").pop())\n\n    if (githubOwners.length === 0 && slackUrls.length === 0) {\n      log(repo, \"Has no owners\")\n    } else {\n\n      const usersNotInOrg: any[] = []\n      for (const owner of githubOwners) {\n        const inOrg = await isUserInOrg(gh, org, owner)\n        if (!inOrg) {\n          usersNotInOrg.push(owner)\n        }\n      }\n      if (usersNotInOrg.length) {\n        log(repo, \"Found someone not in the org: \" + usersNotInOrg)\n      }\n    }\n  }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gh\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Github.Octokit({headers: {\"user-agent\": \"Org README checker\"}})\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (repo, message) => {\n  console.log(`[${repo}] - ${message}`)\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async () => {\n  let repoSets: any[]\n  if (fs.existsSync(repoCache)) {\n    repoSets = JSON.parse(fs.readFileSync(repoCache).toString())\n  } else {\n    repoSets = await getAllOrgRepos(gh, org)\n    fs.writeFileSync(repoCache, JSON.stringify(repoSets))\n  }\n\n  const repos = repoSets[\"data\"]\n\n  const eigen = _.find(repos, r => r.name === \"eigen\")\n  // const gravity = _.find(repos, r => r.name === \"gravity\")\n  // const artsyD = _.find(repos, r => r.name === \"artsy-danger\")\n\n  await doWork(eigen)\n  // await doWork(gravity)\n  // await doWork(artsyD)\n\n  // for (const repo of repos) {\n  //   await doWork(repo)\n  // }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        org\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${process.env.GITHUB_ORG}`\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repoCache\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${process.env.CACHE_DIR}/repos.json`\n                    \n                \n\n\n        \n    \n\n    src/helpers/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getFile\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (gh, repo: any, path: string): Promise => {\n  try {\n    const content = await gh.repos.getContent({\n      owner: repo.owner.login,\n      repo: repo.name,\n      path\n    })\n\n    const buffer = new Buffer(content.data.content, \"base64\")\n    return buffer.toString()\n\n  } catch (error) {\n    return null\n  }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUserInOrg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (gh, org, username) => {\n  try {\n    await gh.orgs.checkMembership({org, username})\n    return true\n  } catch (error) {\n    return false\n  }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        leaveIssue\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (gh, repo, title, body) => {\n  await gh.issues.create({\n    owner: repo.owner.login,\n    repo: repo.name,\n    title,\n    body,\n  })\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
